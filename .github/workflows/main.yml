# Copyright 2015-2020 The Khronos Group Inc.
# SPDX-License-Identifier: Apache-2.0
name: KTX-Software CI

on:
  # Trigger the workflow on pull request,
  # but only for the master branch
  pull_request:
    branchs:
      - master
    paths-ignore:
      - .appveyor.yml
      - .travis.yml

  # Also trigger on push of release tags
  push:
    tags:
      - "v*.*.*"

  # Allow manual trigger
  workflow_dispatch:

#runs-on: windows-2019
jobs:
  windows:
    strategy:
      matrix:
        os: [ windows-latest ]
        toolset: [v143, CLangCL]
        platform: [ x64 ]
        options: [
          {config: 'Debug,Release',
           doc: ON, jni: ON, loadtests: ON, tests: ON, tools: ON,
           package: YES,
           sse: ON, opencl: OFF},
          {config: Release,
           doc: OFF, loadtests: OFF, tests: OFF, tools: OFF,
           package: NO,
           sse: OFF, opencl: OFF},
          {config: Release,
           doc: OFF, loadtests: OFF, tests: OFF, tools: OFF,
           package: NO,
           sse: OFF, opencl: ON},
          {config: Release,
           doc: OFF, loadtests: OFF, tests: OFF, tools: OFF,
           package: NO,
           sse: ON, opencl: ON}
        ]
        include:
#          - os: windows-latest
#            generator: 'Visual Studio 17 2022'
#            toolset: v143
          - os: windows-2019
            generator: 'Visual Studio 16 2019'
            toolset: v142
            platform: x64
            options: {
              config: 'Debug,Release',
              doc: ON, jni: ON, loadtests: ON, tests: ON, tools: ON,
              package: NO,
              sse: ON, opencl: OFF
            }
#          - os: windows-latest
#            generator: 'Visual Studio 17 2022'
#            toolset: CLangCL
#            platform: x64
#            options: {
#              config: 'Release',
#              doc: ON, jni: OFF, loadtests: OFF, tests: ON, tools: ON,
#              package: YES
#            }
          - os: windows-latest
            generator: 'Visual Studio 17 2022'
            toolset: CLangCL
            platform: arm64
            # No tests on arm64 since the host is x64 and can't run the
            # built tests
            options: {
              config: 'Debug,Release',
              doc: ON, jni: OFF, loadtests: OFF, tests: OFF, tools: ON,
              package: YES
            }
    runs-on: ${{ matrix.os }}
    env:
      # Skip downloading necessities for the load tests and source and golden
      # images for the other tests since we can't run arm64 tests on the x64
      # build host.
      GIT_LFS_SKIP_SMUDGE: 1

      BUILD_DIR: "build"

      CMAKE_GEN: ${{ matrix.generator }}
      PLATFORM: ${{ matrix.platform }}
      CMAKE_TOOLSET: ${{ matrix.toolset }}

      CONFIGURATION: ${{ matrix.options.config }}
      FEATURE_DOC: ${{ matrix.options.doc }}
      FEATURE_JNI: ${{ matrix.options.jni }}
      FEATURE_LOADTESTS: ${{ matrix.options.loadtests }}
      FEATURE_TESTS: ${{ matrix.options.tests }}
      FEATURE_TOOLS: ${{ matrix.options.tools }}
      PACKAGE: ${{ matrix.options.package }}
      SUPPORT_OPENCL: ${{ matrix.options.opencl }}
      SUPPORT_SSE: ${{ matrix.options.sse }}

      CODE_SIGN_TIMESTAMP_URL: "http://timestamp.digicert.com"
      AZURE_KEY_VAULT_URL: ${{ secrets.AZURE_KEY_VAULT_URL }}
      AZURE_KEY_VAULT_CERTIFICATE: ${{ secrets.AZURE_KEY_VAULT_CERTIFICATE }}
      AZURE_KEY_VAULT_CLIENT_ID: ${{ secrets.AZURE_KEY_VAULT_CLIENT_ID }}
      AZURE_KEY_VAULT_CLIENT_SECRET: ${{ secrets.AZURE_KEY_VAULT_CLIENT_SECRET }}
      AZURE_KEY_VAULT_TENANT_ID: ${{ secrets.AZURE_KEY_VAULT_TENANT_ID }}

      OPENCL_SDK_HOME: https://github.com/intel/llvm/releases/download/2021-09
      OPENCL_SDK_NAME: win-oclcpuexp-2021.12.9.0.24_rel
      OPENGL_ES_EMULATOR: C:/Imagination/Windows_x86_64
      OPENGL_ES_EMULATOR_WIN: C:\Imagination\Windows_x86_64
      PVR_SDK_HOME: https://github.com/powervr-graphics/Native_SDK/raw/master/lib/Windows_x86_64/
      VULKAN_SDK_VER: 1.3.243.0

    steps:
    - uses: actions/checkout@v3
      with:
        # Fetch all history to make sure tags are
        # included (used for version creation)
        fetch-depth: 0

    - name: Force fetch provoking tag's annotation.
      # Work around https://github.com/actions/checkout/issues/290.
      if: github.ref_type == 'tag'
      run: git fetch -f origin ${{ github.ref }}:${{ github.ref }}

    # Need doxygen if docs are supposed to be built
    # Use the pre-installed `choco`. Although it's v1 it works. Do not
    # do `uses: crazy-max/ghaction-chocolatey@v2` because it suffers
    # frequent failures due to Chocolatey attempts to blackmail you
    # into purchasing a license. If this does fail, re-run the build.
    - name: Install Doxygen
      if: matrix.options.doc == 'ON'
      run: choco install doxygen.install

    - name: Install AzureSignTool
      id: install-ast
      run: |
        if ($env:PACKAGE -eq "YES" -and $env:AZURE_KEY_VAULT_URL) {
          dotnet tool install --global AzureSignTool
          echo "CODE_SIGN_KEY_VAULT=Azure" >> $env:GITHUB_ENV
        }

    - name: Install Dependencies
      # This script only installs what's needed by ON FEATUREs.
      run: ci_scripts/install_win.ps1

    - name: Set up JDK 17.
      if: matrix.options.jni == 'ON'
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Build Windows
      #   The installers run as part of "Install Dependencies" add
      # environment variables to the registry and augment $Path there.
      # Although each step gets a new Powershell instance, that instance
      # is spawned from some parent Powershell so it does not pick up
      # the changes from the registry. Use Chocolatey's helper to
      # pull in the changes.
      #   After import `refreshenv` is an alias for
      # Update-SessionEnvironment. Without the import refreshenv will end
      # up calling the cmd.exe version, which won't help Powershell, and
      # Update-SessionEnvironment will not exist.
      #   Unfortunately this resets JAVA_HOME to whatever is in the registry.
      # The one from the Set Up JDK step was set in the environment before
      # this step is called.
      run: |
        $step_java_home=$env:JAVA_HOME
        Import-Module "$env:ChocolateyInstall/helpers/chocolateyInstaller.psm1"
        refreshenv
        $env:JAVA_HOME=$step_java_home
        ci_scripts/build_win.ps1

    - name: Test Windows build
      if: matrix.platform == 'x64' && matrix.options.tests == 'ON'
      run: ctest --test-dir $env:BUILD_DIR -C Release

    - name: Get KTX version
      if: matrix.options.package == 'YES'
      id: ktx-version
      run: |
        $KTX_VERSION = Get-Content $env:BUILD_DIR/ktx.version
        echo "KTX_VERSION=$KTX_VERSION" >> $env:GITHUB_ENV

    - name: Upload Artifact
      if: matrix.options.package == 'YES' && matrix.toolset == 'CLangCL'
      uses: actions/upload-artifact@v3
      with:
        name: KTX-Software-${{env.KTX_VERSION}}-Windows-${{matrix.platform}}
        path: ${{env.BUILD_DIR}}/KTX-Software-*.exe*

    - name: Upload To Release
      uses: softprops/action-gh-release@v1
      if: matrix.options.package == 'YES' && matrix.toolset == 'CLangCL' && github.event_name == 'push' && github.ref_type == 'tag'
      with:
        draft: true
        prerelease: true
        files: ${{env.BUILD_DIR}}/KTX-Software-*.exe*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  mingw:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3
      with:
        # Fetch all history to make sure tags are
        # included (used for version creation)
        fetch-depth: 0
    #- uses: Honeybunch/setup-mingw@v3
    - uses: egor-tensin/setup-mingw@v2
      with:
        platform: x64
    - name: Force update provoking tag
      # Work around https://github.com/actions/checkout/issues/290.
      if: github.ref_type == 'tag'
      run: git fetch -f origin ${{ github.ref }}:${{ github.ref }}
    - name: Pull test images from Git LFS
      run: git lfs pull --include=tests/srcimages,tests/testimages
    - name: Install Ninja
      run: choco install ninja
    - name: Configure Mingw x64
      run: cmake -B build -G "Ninja Multi-Config" -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++
    - name: Build Mingw x64 Debug
      run: cmake --build build --config Debug
    - name: Build Mingw x64 Release
      run: cmake --build build --config Release
    - name: Test Mingw build
      run: ctest --test-dir build -C Release
    - name: Upload test log
      if: ${{ failure() }}
      run: ci_scripts/on_failure.ps1

  linux:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
      with:
        # Fetch all history to make sure tags are
        # included (used for version creation)
        fetch-depth: 0

    - uses: nttld/setup-ndk@v1
      id: setup-ndk
      with:
        ndk-version: r21e
        add-to-path: false

    - name: Force fetch provoking tag's annotation.
      # Work around https://github.com/actions/checkout/issues/290.
      if: github.ref_type == 'tag'
      run: git fetch -f origin ${{ github.ref }}:${{ github.ref }}

    - name: Install Ninja
      run: sudo apt-get install -y ninja-build

    - name: android_Debug_arm64-v8a
      run: ./ci_scripts/build_android_debug.sh
      env:
        ANDROID_ABI: arm64-v8a
        ANDROID_NDK: ${{ steps.setup-ndk.outputs.ndk-path }}
        ASTC_ISA: "ISA_NEON=ON"
        CONFIGURATION: Debug

    - name: android_arm64-v8a
      run: ./ci_scripts/build_android.sh
      env:
        ANDROID_ABI: arm64-v8a
        ANDROID_NDK: ${{ steps.setup-ndk.outputs.ndk-path }}
        ASTC_ISA: "ISA_NEON=ON"

    # Android ABI x86 is obsolete
    # and not supported by ARM ASTC encoder

    # - name: android_x86
    #   run: ./ci_scripts/build_android.sh
    #   env:
    #     ANDROID_ABI: x86
    #     ANDROID_NDK: ${{ steps.setup-ndk.outputs.ndk-path }}

    - name: android_x86_64
      run: ./ci_scripts/build_android.sh
      env:
        ANDROID_ABI: x86_64
        ANDROID_NDK: ${{ steps.setup-ndk.outputs.ndk-path }}

    - name: get-version
      id: ktx-version
      run: |
        KTX_VERSION=$(cat build-android-arm64-v8a/ktx.version)
        echo "KTX_VERSION=$KTX_VERSION" >> $GITHUB_ENV

    # Android artifact
    # Zips the include and lib dirs installed for each architecture
    # by the preceding steps and uploads the zip.
    - name: upload artifact
      id: upload-artifact
      uses: actions/upload-artifact@v3
      with:
        name: KTX-Software-${{env.KTX_VERSION}}-Android
        path: install-android

    # Make an archive to be deployed.
    # Although the preceding step made an archive, Actions helpfully :-(
    # unarchives the files on download.
    - name: Create zip for deployment.
      if: github.event_name == 'push' && github.ref_type == 'tag'
      run: |
        zip_basename=KTX-Software-${KTX_VERSION}-Android
        ln -s install-android $zip_basename
        zip -r $zip_basename.zip $zip_basename
        sha1sum $zip_basename.zip > $zip_basename.zip.sha1

    - name: Upload To Release
      uses: softprops/action-gh-release@v1
      if: github.event_name == 'push' && github.ref_type == 'tag'
      with:
        draft: true
        prerelease: true
        files:  KTX-Software-${{env.KTX_VERSION}}-Android.zip*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

