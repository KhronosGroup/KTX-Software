# This file is generated by gyp; do not edit.

TOOLSET := target
TARGET := transcodetests
DEFS_Debug := \
	'-DGTEST_HAS_PTHREAD=0' \
	'-D_HAS_EXCEPTIONS=1' \
	'-DDEBUG' \
	'-D_DEBUG'

# Flags passed to all source files.
CFLAGS_Debug := \
	-Wpedantic \
	-Og \
	-g

# Flags passed to only C files.
CFLAGS_C_Debug := \
	-std=c99

# Flags passed to only C++ files.
CFLAGS_CC_Debug := \
	-std=c++11 \
	-Wno-pedantic

INCS_Debug := \
	-I$(srcdir)/interface/c_binding/inc \
	-I$(srcdir)/lib \
	-I$(srcdir)/lib/basisu/transcoder \
	-I$(srcdir)/utils \
	-I$(srcdir)/tests/gtest/include \
	-I$(srcdir)/tests/unittests \
	-I$(srcdir)/include \
	-I$(srcdir)/other_include

DEFS_Release := \
	'-DGTEST_HAS_PTHREAD=0' \
	'-D_HAS_EXCEPTIONS=1' \
	'-DNDEBUG'

# Flags passed to all source files.
CFLAGS_Release := \
	-Wpedantic \
	-O3

# Flags passed to only C files.
CFLAGS_C_Release := \
	-std=c99

# Flags passed to only C++ files.
CFLAGS_CC_Release := \
	-std=c++11 \
	-Wno-pedantic

INCS_Release := \
	-I$(srcdir)/interface/c_binding/inc \
	-I$(srcdir)/lib \
	-I$(srcdir)/lib/basisu/transcoder \
	-I$(srcdir)/utils \
	-I$(srcdir)/tests/gtest/include \
	-I$(srcdir)/tests/unittests \
	-I$(srcdir)/include \
	-I$(srcdir)/other_include

OBJS := \
	$(obj).target/$(TARGET)/interface/c_binding/src/basisu_c_binding.o \
	$(obj).target/$(TARGET)/tests/transcodetests/transcodetests.o

# Add to the list of files we specially track dependencies for.
all_deps += $(OBJS)

# Make sure our dependencies are built before any of us.
$(OBJS): | $(obj).target/libgtest.a $(builddir)/lib.target/libktx.gl.so $(obj).target/libgl.stamp $(obj).target/libktx.gl.so

# CFLAGS et al overrides must be target-local.
# See "Target-specific Variable Values" in the GNU Make manual.
$(OBJS): TOOLSET := $(TOOLSET)
$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))
$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))

# Suffix rules, putting all outputs into $(obj).

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.cc FORCE_DO_CMD
	@$(call do_cmd,cxx,1)

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.cpp FORCE_DO_CMD
	@$(call do_cmd,cxx,1)

# Try building from generated source, too.

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.cc FORCE_DO_CMD
	@$(call do_cmd,cxx,1)

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.cpp FORCE_DO_CMD
	@$(call do_cmd,cxx,1)

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.cc FORCE_DO_CMD
	@$(call do_cmd,cxx,1)

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.cpp FORCE_DO_CMD
	@$(call do_cmd,cxx,1)

# End of this set of suffix rules
### Rules for final target.
LDFLAGS_Debug := \
	-g \
	-Wl,-rpath=\$$ORIGIN/lib.target/ \
	-Wl,-rpath-link=\$(builddir)/lib.target/

LDFLAGS_Release := \
	-Wl,-rpath=\$$ORIGIN/lib.target/ \
	-Wl,-rpath-link=\$(builddir)/lib.target/

LIBS := \
	-lGL

$(builddir)/transcodetests: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))
$(builddir)/transcodetests: LIBS := $(LIBS)
$(builddir)/transcodetests: LD_INPUTS := $(OBJS) $(obj).target/libgtest.a $(obj).target/libktx.gl.so
$(builddir)/transcodetests: TOOLSET := $(TOOLSET)
$(builddir)/transcodetests: $(OBJS) $(obj).target/libgtest.a $(obj).target/libktx.gl.so FORCE_DO_CMD
	$(call do_cmd,link)

all_deps += $(builddir)/transcodetests
# Add target alias
.PHONY: transcodetests
transcodetests: $(builddir)/transcodetests

# Add executable to "all" target.
.PHONY: all
all: $(builddir)/transcodetests

