# Copyright 2015-2020 The Khronos Group Inc.
# SPDX-License-Identifier: Apache-2.0

version: "{build}"

configuration:

platform:
  - x64
#  - Win32

environment:
  CMAKE_GEN: Visual Studio 15 2017
  GIT_TRACE: 0
  GIT_LFS_SKIP_SMUDGE: 1
  BUILD_DIR: build
  OPENCL_SDK_HOME: https://github.com/intel/llvm/releases/download/2021-09
  OPENCL_SDK_NAME: win-oclcpuexp-2021.12.9.0.24_rel
  OPENGL_ES_EMULATOR: C:/Imagination/Windows_x86_64
  OPENGL_ES_EMULATOR_WIN: C:\Imagination\Windows_x86_64
  PACKAGE: NO
  PVR_SDK_HOME: https://github.com/powervr-graphics/Native_SDK/raw/master/lib/Windows_x86_64/
  VULKAN_SDK_VER: 1.2.176.1

  matrix:
    - FEATURE_DOC: OFF
      FEATURE_JNI: OFF
      FEATURE_LOADTESTS: ON
      FEATURE_TOOLS: ON
      SUPPORT_SSE: ON
      SUPPORT_OPENCL: OFF
      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015
      CMAKE_GEN: Visual Studio 14 2015
      CONFIGURATION: Debug,Release
    - FEATURE_DOC: OFF
      FEATURE_JNI: OFF
      FEATURE_LOADTESTS: ON
      FEATURE_TOOLS: ON
      SUPPORT_SSE: ON
      SUPPORT_OPENCL: OFF
      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
      CMAKE_GEN: Visual Studio 15 2017
      CONFIGURATION: Debug,Release
      # This is the configuration used for the release.
    - FEATURE_DOC: ON
      FEATURE_JNI: ON
      FEATURE_LOADTESTS: ON
      FEATURE_TOOLS: ON
      PACKAGE: YES
      SUPPORT_SSE: ON
      SUPPORT_OPENCL: OFF
      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2019
      CMAKE_GEN: Visual Studio 16 2019
      CONFIGURATION: Debug,Release
      JAVA_HOME: C:\Program Files\Java\jdk17
    - FEATURE_DOC: OFF
      FEATURE_JNI: OFF
      FEATURE_LOADTESTS: OFF
      FEATURE_TOOLS: OFF
      SUPPORT_SSE: ON
      SUPPORT_OPENCL: ON
      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2019
      CMAKE_GEN: Visual Studio 16 2019
      CONFIGURATION: Release
    - FEATURE_DOC: OFF
      FEATURE_JNI: OFF
      FEATURE_LOADTESTS: OFF
      FEATURE_TOOLS: OFF
      SUPPORT_SSE: OFF
      SUPPORT_OPENCL: ON
      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2019
      CMAKE_GEN: Visual Studio 16 2019
      CONFIGURATION: Release
    - FEATURE_DOC: OFF
      FEATURE_JNI: OFF
      FEATURE_LOADTESTS: OFF
      SUPPORT_SSE: OFF
      SUPPORT_OPENCL: OFF
      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2019
      CMAKE_GEN: Visual Studio 16 2019
      CONFIGURATION: Release

#matrix:

branches:
  except:
    - /^subrepo\/.+/

# Do not skip tags. Deploy will not be run either.
skip_tags: false

# Keep this to remind me how to do this in case I need it again.
# Since we're not currently using image this has no effect.
for:
  - matrix:
      only:
        - image: Visual Studio 2015
    environment:
      CMAKE_GEN: Visual Studio 14 2015
      JAVA_HOME: C:\Program Files\Java\jdk13
  - matrix:
      only:
        - image: Visual Studio 2017
    environment:
      CMAKE_GEN: Visual Studio 15 2017
      JAVA_HOME: C:\Program Files\Java\jdk13
  - matrix:
      only:
        - image: Visual Studio 2019
    environment:
      CMAKE_GEN: Visual Studio 16 2019
      JAVA_HOME: C:\Program Files\Java\jdk17

build:
  verbosity: detailed

on_failure:
  - ps: $env:APPVEYOR_BUILD_FOLDER/ci_scripts/on_failure.ps1 $env:APPVEYOR_BUILD_FOLDER $env:BUILD_DIR
# Following is for GIT_TRACE: 1 above.
#  - ps: Get-ChildItem .\.git\lfs\objects\logs\*.log | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }

# Uncomment the Following to stop RDP exiting at end of build.
#on_finish:
#  - ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))

clone_folder: c:\projects\ktx

init:
  # Set to match Git for Windows default so files with have the line endings we
  # expect on Windows. Why Appveyor changed it, I have no idea.
  - git config --global core.autocrlf true
# This ps command enables RDP and provides the login details. blockRdp variant stops the
# build proceeding until RDP is connected.
#  - ps: '$blockRdp = $true; iex ((new-object net.webclient).DownloadString(''https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1''))'
# - ps: | #iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))


# N.B.: for some reason indenting "- cmd" on the following lines causes syntax
# errors.
install:
- if not "%appveyor_build_worker_image%" == "Visual Studio 2019" cinst doxygen.install
#- ps: |
    #run mkversion
    #Update-AppveyorBuild -Version "$($env:ospsuite_version).$($env:appveyor_build_version)"

    # Not using PS for install because "curl" is an alias for
    # Invoke-WebRequest a completely different command that is difficult to
    # use for downloads. When I wrote the .bat script, so I could use the
    # real  curl, I did not know PS's curl was just an alias and I could get
    # the real curl with "curl.exe". Doh! Now it is a case of if it ain't
    # broke don't fix it.
    #
    # To avoid going down a rathole note very well that in at least some of
    # the CI environments, cmd.exe does not support pushd and popd. Sigh!
    # Also keep quotes in following echos & rems to avoid issues with
    # cmd special characters, e.g. &.
- cmd: |
    ci_scripts/install_win.bat
    rem JAVA_HOME is in registry so refreshenv overrides job setting.
    set JOB_JAVA_HOME=%JAVA_HOME%
    echo "Pick up environment changes made to registry by the install script."
    refreshenv
    set JAVA_HOME=%JOB_JAVA_HOME%
# # One-line install/build zlib (for loadtests) into C:\Program Files\zlib
# - ps: |
#     Invoke-WebRequest -Uri https://raw.githubusercontent.com/horta/zlib.install/master/install.bat -OutFile install.bat
#     ./install.bat
- ps: if ($env:CERT_PK_PASS) { iex ((New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/appveyor/secure-file/master/install.ps1')) }


#cache:
#  - other_lib
before_build:
# Expand date keywords.
#   -q is because the VS2019 image has a more recent git version (2.21.0)
#   in which git checkout writes to StdErr which PS treats as an exception
#   causing the build to fail, if checkout is the last command in this shell.
#   The write is an innocuous message about the number of paths updated.
- ps: |
    ./install-gitconfig.bat
    rm TODO.md, lib/mainpage.md, pkgdoc/pages.md
    git checkout -q TODO.md lib/mainpage.md pkgdoc/pages.md
    git status

# Import signing certificate into local machine store.
#   This is because `certutil -user`, to install in user's store,
#   produces a pop-up dialog that stalls CI while waiting for an answer.
#   The dialog warns that the trusted root CA of the cert can't be verified.
#   This happens on the development machine too. Since the root CA
#   certificates of both user and machine stores appear to be identical and
#   the interactive `certmgr` for the user store can import the same
#   certificate I don't understand the reason.
- ps: |
    if ($env:CERT_PK_PASS) {
      $cert_file = "the_khronos_group_inc.p12"
      appveyor-tools\secure-file -decrypt "${cert_file}.enc" -secret $env:CERT_DC_SECRET -salt $env:CERT_DC_SALT
      certutil -p $env:CERT_PK_PASS -importpfx My $cert_file NoExport
      rm $cert_file
      $env:WIN_CODE_SIGN_IDENTITY = 'The Khronos Group Inc'
      $env:WIN_CS_CERT_SEARCH_MACHINE_STORE = 'ON'
    } else {
      $env:WINDOWS_CODE_SIGN_IDENTITY = ''
    }

build_script:
- ps: |
    $ErrorActionPreference = 'Stop'
    ci_scripts/build_win.ps1

    #echo "***** toktx version.h *****"
    #pwd
    #cat ../tools/toktx/version.h
    #echo "****** toktx version ******"
    ## Because toktx prints version to stderr.
    #$ErrorActionPreference = 'SilentlyContinue'
    #& $env:CONFIGURATION/toktx --version
    #$ErrorActionPreference = 'Stop'
    #echo "***************************"

test_script:
- ps: |
    $Env:Phase = "test"
    pushd $env:BUILD_DIR
    $configArray = $env:CONFIGURATION.split(",")
    foreach ($config in $configArray) {
      echo "Testing KTX-Software ($config)"
      ctest -C $config
    }
    popd

artifacts:
  # Save in cloud storage so we can deploy it. Will be kept unnecessarily for
  # 1 month. Would be nice to avoid saving artifacts from every build in the
  # matrix. No info in Appveyor docs.
  - path: '$(BUILD_DIR)/KTX-Software-*.exe'
    name: WindowsInstaller
  - path: '$(BUILD_DIR)/KTX-Software-*.exe.sha1'
    name: WindowsInstallerSha1

before_deploy:
- ps: |
    foreach ($artifactName in $artifacts.keys) {
      $artifacts[$artifactName]
    }

deploy:
    # Deploy to GitHub Releases
    provider: GitHub
    auth_token:
      secure: ts/Kjg56NnVMgXsM2J/4jXA3W9kIA58rg4B32uRuJDqyNRmkAGWlCXP9Zbp29Uip
    # Don't set so tag name will be used as release name.
    #release:
    # Can't get this to work using artifact.path so use artifact.name set above.
    artifact: WindowsInstaller,WindowsInstallerSha1
    draft: true
    prerelease: true
    on:
      APPVEYOR_REPO_TAG: true       # deploy on tag push only
      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2019
      PACKAGE: YES
