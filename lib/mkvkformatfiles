#! /usr/bin/awk -f
# Copyright 2019-2020 Mark Callow
# SPDX-License-Identifier: Apache-2.0

# This script creates 3 files from vulkan/vulkan_core.h:
#
# - vkformat_enum.h, the VkFormat enum declaration for those who don't
#   want to include vulkan_core.h.
# - vkformat_str.c, a switch statement for converting VkFormat enums to
#   to strings corresponding to the format names.
# - vkformat_check.c, 2 functions: 1 to checking if a format is prohibited in
#   KTX2 and the other to see if a format is valid.
#   KTX2.

BEGIN {
    vulkan_core = "vulkan_core.h"
    processing_core_formats = 0
    processing_extension_formats = 0
    # Range pattern matches 2nd line to avoid other comments so need
    # comment opening.
    copyright = "/*\n"
    banner = ""
    format_decl = ""
    core_formats = ""
    extension_formats = ""
    end_range = ""
    max_std_format_enum = 0
    prohibited = "#include <stdint.h>\n#include <stdbool.h>\n\n"
    prohibited = prohibited "#include \"vkformat_enum.h\"\n\n"
    prohibited = prohibited "bool\nisProhibitedFormat(VkFormat format)\n{\n"
    prohibited = prohibited "    switch (format) {\n";
    valid = "bool\nisValidFormat(VkFormat format)\n{\n"
    valid = valid "    // On MSVC VkFormat can be a signed integer\n"
    valid = valid "    if ((uint32_t) format <= VK_FORMAT_MAX_STANDARD_ENUM)\n"
    valid = valid "        return true;\n    else switch(format) {\n"
    if (ARGC == 2) {
        output_dir = ARGV[1] "/";
    }
    format_hdr = output_dir "vkformat_enum.h"
    format_strings = output_dir "vkformat_str.c"
    format_check = output_dir "vkformat_check.c"
# Use local vulkan_core.h until ASTC 3D texture extension is released.
#    if (ENVIRON["Vulkan_INCLUDE_DIR"]) {
#        vulkan_include_dir = ENVIRON["Vulkan_INCLUDE_DIR"];
#    } else {
#        vulkan_include_dir = "/usr/include";
#    }
#    ARGV[1] = vulkan_include_dir"/vulkan/"vulkan_core; ARGC = 2
     ARGV[1] = "lib/dfdutils/vulkan/"vulkan_core; ARGC = 2
}

# A range pattern to extract the copyright message.
/\*\* Copyright*/,/\*\// { copyright = copyright $0 "\n" }

$2 == "VK_HEADER_VERSION" {
  banner = "\n"
  banner = banner "/***************************** Do not edit.  *****************************\n"
  banner = banner " Automatically generated from " vulkan_core " version " $3 " by mkvkformatfiles.\n"
  banner = banner " *************************************************************************/\n"
}

# Extract VkFlags definition.
/typedef .* VkFlags/ {
  format_decl = format_decl "#if defined(_MSC_VER) && _MSC_VER < 1900 // Older than VS 2015.\n"
  format_decl = format_decl "typedef unsigned __int32 VkFlags;\n#else\n"
  format_decl = format_decl "#include <stdint.h>\n"
  format_decl = format_decl $0 "\n#endif\n\n"
}

# A range pattern to extract the VkFormat declaration.
/^typedef enum VkFormat {/,/^} VkFormat;/ {
  if ($3 !~ /VK_FORMAT_.*/) { # Avoid values defined as existing values.
    format_decl = format_decl $0 "\n"
    if ($1 ~ /VK_FORMAT/ && $1 !~ /.*MAX_ENUM/ && $3 !~ /1000....../) {
      # I don't understand why but if I apply the sub to $3 here, it
      # breaks extraction of VK_FORMAT token names below. It is like
      # this $3 becomes the $3 seen down there.
      enum_val = $3;
      sub(/,$/, "", enum_val);
      if (enum_val+0 > max_std_format_enum) {
        max_std_format_enum = enum_val+0;
      }
    }
  }
  if ($1 ~ /}/) {
    end_range = "#define VK_FORMAT_MAX_STANDARD_ENUM " max_std_format_enum "\n";
  }
}

/.*SCALED|A8B8G8R8_.*_PACK32/  { prohibited = prohibited "      case " $1 ":\n"; }
#/A8B8G8R8_.*_PACK32/  { prohibited = prohibited "      case " $1 ":\n"; }
# Multiplane formats.
/VK_FORMAT_[^F]/ && (/PLANE/ || /420/) {
  # Avoid values defined as existing values and avoid the MAX_ENUM value.
  if ($3 !~ /VK_FORMAT_.*/ && $1 !~ /.*MAX_ENUM/) {
    prohibited = prohibited "      case " $1 ":\n";
  }
}

# Extract valid formats with values > VK_FORMAT_END_RANGE.
/VK_FORMAT_[^F].* = 1000/ && ! /PLANE/ && !/420/ {
  valid = valid "        case " $1 ":\n";
}

function removePrefix(string, prefix) {
  sub("^" prefix, "", string)
  return string
}

# Extract VK_FORMAT token names. [^F] avoids the VK_FORMAT_FEATURE* tokens.
/    VK_FORMAT_[^F]/ {
  switch_value = ""
  if ($1 !~ /.*MAX_ENUM/) { # Avoid the MAX_ENUM value.
    if ($3 !~ /VK_FORMAT_.*/) { # Avoid values defined as existing values.
      switch_body_vk2str = switch_body_vk2str "      case " $1 ":\n        return \"" $1 "\";\n"
      switch_value = $1 # Use symbolic not numeric value.
    } else {
      switch_value = $3 # Use symbol for existing value.
      sub(/,.*$/, "", switch_value)
    }
    switch_body_str2vk = switch_body_str2vk "    if (ktx_strcasecmp(str, \"" removePrefix($1, "VK_FORMAT_") "\") == 0)\n        return " switch_value ";\n"
  }
}

function write_header_file(guard1, guard2, body, filename) {
    if (guard2) {
        print "#if !defined("guard1") && !defined("guard2")" > filename
    } else {
        print "#ifndef "guard1 > filename
    }
    print "#define "guard1 > filename
    print banner > filename
    print copyright > filename
    print body > filename
    print "#endif /* "guard1" */" > filename
}

function write_source_file(body, filename) {
    print banner > filename
    print copyright > filename
    print body > filename
}

END {
    # vkformat_enum.h
    write_header_file("_VKFORMAT_ENUM_H_", "VULKAN_CORE_H_", format_decl "\n" end_range, format_hdr);

    # vkformat_prohibited.c
    prohibited = prohibited "        return true;\n"
    prohibited = prohibited "      default:\n        return false;\n    }\n}\n";
    valid = valid "        return true;\n"
    valid = valid "      default:\n        return false;\n    }\n}\n";
    write_source_file(prohibited "\n" valid, format_check)

    # vkformat_str.c
    prelude = "\n";
    prelude = prelude "#include <stdint.h>\n";
    prelude = prelude "#include <ctype.h>\n";
    prelude = prelude "\n";
    prelude = prelude "#include \"vkformat_enum.h\"\n";
    prelude = prelude "\n";
    prelude = prelude "const char*\nvkFormatString(VkFormat format)\n{\n";
    prelude = prelude "    switch (format) {\n";
    postscript = "      default:\n        return \"VK_UNKNOWN_FORMAT\";\n";
    postscript = postscript "    }\n";
    postscript = postscript "}\n";
    begin_str2vk = "\n"
    begin_str2vk = begin_str2vk "static int ktx_strcasecmp(const char* s1, const char* s2) {\n"
    begin_str2vk = begin_str2vk "    const unsigned char* us1 = (const unsigned char*) s1;\n"
    begin_str2vk = begin_str2vk "    const unsigned char* us2 = (const unsigned char*) s2;\n"
    begin_str2vk = begin_str2vk "\n"
    begin_str2vk = begin_str2vk "    while (tolower(*us1) == tolower(*us2)) {\n"
    begin_str2vk = begin_str2vk "        if (*us1 == '\\0')\n"
    begin_str2vk = begin_str2vk "            return 0;\n"
    begin_str2vk = begin_str2vk "        ++us1;\n"
    begin_str2vk = begin_str2vk "        ++us2;\n"
    begin_str2vk = begin_str2vk "    }\n"
    begin_str2vk = begin_str2vk "    return tolower(*us1) - tolower(*us2);\n"
    begin_str2vk = begin_str2vk "}\n"
    begin_str2vk = begin_str2vk "\n"
    begin_str2vk = begin_str2vk "static int ktx_strncasecmp(const char* s1, const char* s2, int length) {\n"
    begin_str2vk = begin_str2vk "    const unsigned char* us1 = (const unsigned char*) s1;\n"
    begin_str2vk = begin_str2vk "    const unsigned char* us2 = (const unsigned char*) s2;\n"
    begin_str2vk = begin_str2vk "\n"
    begin_str2vk = begin_str2vk "    while (length > 0 && tolower(*us1) == tolower(*us2)) {\n"
    begin_str2vk = begin_str2vk "        if (*us1 == '\\0')\n"
    begin_str2vk = begin_str2vk "            return 0;\n"
    begin_str2vk = begin_str2vk "        ++us1;\n"
    begin_str2vk = begin_str2vk "        ++us2;\n"
    begin_str2vk = begin_str2vk "        --length;\n"
    begin_str2vk = begin_str2vk "    }\n"
    begin_str2vk = begin_str2vk "    if (length == 0)\n"
    begin_str2vk = begin_str2vk "        return 0;\n"
    begin_str2vk = begin_str2vk "    return tolower(*us1) - tolower(*us2);\n"
    begin_str2vk = begin_str2vk "}\n"
    begin_str2vk = begin_str2vk "\n"
    begin_str2vk = begin_str2vk "/// Parses a VkFormat. VK_FORMAT_ prefix is optional. Case insensitive.\n"
    begin_str2vk = begin_str2vk "VkFormat\n"
    begin_str2vk = begin_str2vk "stringToVkFormat(const char* str)\n"
    begin_str2vk = begin_str2vk "{\n"
    begin_str2vk = begin_str2vk "    if (ktx_strncasecmp(str, \"VK_FORMAT_\", sizeof(\"VK_FORMAT_\") - 1) == 0)\n"
    begin_str2vk = begin_str2vk "        str += sizeof(\"VK_FORMAT_\") - 1;\n"
    begin_str2vk = begin_str2vk "\n"
    end_str2vk = "    return VK_FORMAT_UNDEFINED;\n";
    end_str2vk = end_str2vk "}"
    write_source_file(prelude switch_body_vk2str postscript begin_str2vk switch_body_str2vk end_str2vk, format_strings);
}

# vim:ai:ts=4:sts=4:sw=2:expandtab:textwidth=70

